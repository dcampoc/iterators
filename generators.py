# -*- coding: utf-8 -*-
"""
Created on Tue Sep  3 05:55:57 2019

@author: dcamp
"""
#   Generators do not create a list (they do not occupy memory!) but they can be called and values can be extracted from them

# Exersize 1
# Create generator object: result
result = (num for num in range(31))

print('first part'.upper())
# Print the first 5 values
print(next(result))
print(next(result))
print(next(result))
print(next(result))
print(next(result))

print('second part'.upper())
# Print the rest of the values
for value in result:
    print(value)

# Exersize 2
# Create a list of strings: lannister
lannister = ['cersei', 'jaime', 'tywin', 'tyrion', 'joffrey']

# Create a generator object: lengths
lengths = (len(person) for person in lannister )

# Iterate over and print the values in lengths
for value in lengths:
    print(value)
    
############################################################
print('Function version'.upper())

# Create a list of strings
lannister = ['cersei', 'jaime', 'tywin', 'tyrion', 'joffrey']

# Define generator function get_lengths
def get_lengths(input_list):
    """Generator function that yields the
    length of the strings in input_list."""

    # Yield the length of a string
    for person in input_list:
        yield len(person)

# Print the values generated by get_lengths()
for value in get_lengths(lannister):
    print(value)
    
    
    
    